import asyncio
from telebot import types
from sc_client import client
from stalcraft import LocalItem, Order, Sort
from main import bot
import threading
from time import sleep



# –û–±—â–∏–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–æ–≤
stop_event = threading.Event()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_threads = {}

# –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = 0

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MAX_USERS = 20

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
semaphore = asyncio.Semaphore(MAX_USERS)

lock = threading.Lock()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å–Ω—è—Ç–∏–∏ –ª–æ—Ç–∞
sent_lot_removal_messages = {}


@bot.callback_query_handler(func=lambda call: call.data == "auction")
def handle_callback_query_auction(call):
    global active_users
    chat_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ 'get_chat_member' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        member = bot.get_chat_member(chat_id=-1002098126171, user_id=call.from_user.id)

        if member.status != 'left':


            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup(row_width=1)
            button_armor = types.InlineKeyboardButton(text="–ë—Ä–æ–Ω—è", callback_data="armor")
            button_weapon = types.InlineKeyboardButton(text="–û—Ä—É–∂–∏–µ", callback_data="weapon")
            button_cont = types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", callback_data="cont")
            button_ddt = types.InlineKeyboardButton(text="–î–µ—Ç–µ–∫—Ç–æ—Ä—ã –∏ —Å–∫–∞–Ω–µ—Ä—ã", callback_data="ddt")
            button_art = types.InlineKeyboardButton(text="–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", callback_data="art")
            button_obv = types.InlineKeyboardButton(text="–û–±–≤–µ—Å—ã", callback_data="obv")
            markup.add(button_armor, button_weapon, button_cont, button_ddt, button_art, button_obv)


            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                                  text=f"–•–æ—Ä–æ—à–æ‚ùó\n–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users} –∏–∑ 20\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
                                  reply_markup=markup)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            bot.send_message(chat_id, '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!üö´\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç MoniBot :https://boosty.to/mentho1/purchase/2828670?ssource=DIRECT&share=subscription_link')
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.answer_callback_query(callback_query_id=call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "back")
def handle_callback_query_back(call):
    chat_id = call.message.chat.id

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤–æ–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text="–•–æ—Ä–æ—à–æ‚ùó\n–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users} –∏–∑ 30\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
                          reply_markup=get_auction_markup())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
def get_auction_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_armor = types.InlineKeyboardButton(text="–ë—Ä–æ–Ω—è", callback_data="armor")
    button_weapon = types.InlineKeyboardButton(text="–û—Ä—É–∂–∏–µ", callback_data="weapon")
    button_cont = types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", callback_data="cont")
    button_ddt = types.InlineKeyboardButton(text="–î–µ—Ç–µ–∫—Ç–æ—Ä", callback_data="ddt")
    button_art = types.InlineKeyboardButton(text="–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", callback_data="art")
    button_obv = types.InlineKeyboardButton(text="–û–±–≤–µ—Å—ã", callback_data="obv")
    markup.add(button_armor, button_weapon, button_cont, button_ddt, button_art, button_obv)
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "obv")
def handle_callback_query_obv(call):
    chat_id = call.message.chat.id
    # Create an inline keyboard with weapon options
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_a67 = types.InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω 7.62 30–ø—Ç (—á–µ—Ä–Ω—ã–π)", callback_data="a67")
    button_a66 = types.InlineKeyboardButton(text="–ë–∞—Ä–∞–±–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω 5.45", callback_data="a66")
    button_a68 = types.InlineKeyboardButton(text="–ë–∞—Ä–∞–±–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω 5.56 NATO EMAG", callback_data="a68")
    button_a69 = types.InlineKeyboardButton(text="–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –ê–ö-308", callback_data="a69")
    button_a70 = types.InlineKeyboardButton(text="–ü—Ä–∏—Ü–µ–ª –∫–æ–ª–ª–∏–º–∞—Ç–æ—Ä–Ω—ã–π DM", callback_data="a70")
    button_a79 = types.InlineKeyboardButton(text="–ü—Ä–∏—Ü–µ–ª –æ–ø—Ç–∏—á–µ—Å–∫–∏–π Sig Sauer", callback_data="a79")
    button_a80 = types.InlineKeyboardButton(text="–ü—Ä–∏—Ü–µ–ª –∫–æ–ª–ª–∏–º–∞—Ç–æ—Ä–Ω—ã–π Barska", callback_data="a80")

    markup.add(button_a67, button_a66, button_a68, button_a69, button_a70, button_a79, button_a80)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏ –æ–±–≤–µ—Å:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "armor")
def handle_callback_query_armor(call):
    chat_id = call.message.chat.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–Ω–≥–∞–º–∏ –±—Ä–æ–Ω–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_veteranarmor = types.InlineKeyboardButton(text="–í–µ—Ç–µ—Ä–∞–Ωüü£", callback_data="veteran_armor")
    button_masterarmor = types.InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä üî¥", callback_data="master_armor")
    button_legendarmor = types.InlineKeyboardButton(text="–õ–µ–≥–µ–Ω–¥–∞üü°", callback_data="legend_armor")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_veteranarmor, button_masterarmor, button_legendarmor, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text="–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–Ω–≥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –í–∞—Å –±—Ä–æ–Ω–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "weapon")
def handle_callback_query_weapon(call):
    chat_id = call.message.chat.id
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_veteran = types.InlineKeyboardButton(text="–í–µ—Ç–µ—Ä–∞–Ωüü£", callback_data="veteran_weapon")
    button_master = types.InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä üî¥", callback_data="master_weapon")
    button_legend = types.InlineKeyboardButton(text="–õ–µ–≥–µ–Ω–¥–∞üü°", callback_data="legend_weapon")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_veteran, button_master, button_legend, button_back)

    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text="–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –í–∞—Å –æ—Ä—É–∂–∏—è:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "veteran_armor")
def handle_callback_query_veteran_armor(call):
    chat_id = call.message.chat.id
    # Create an inline keyboard with weapon options
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_a1 = types.InlineKeyboardButton(text="–ú–∞–≥–Ω–∏—Ç", callback_data="a1")
    button_a3 = types.InlineKeyboardButton(text="–¢—É–º–∞–Ω–∫–∞", callback_data="a3")
    button_a4 = types.InlineKeyboardButton(text="–¢–æ–Ω–≥–∞", callback_data="a4")
    button_a5 = types.InlineKeyboardButton(text="–ô–æ—Ä—à", callback_data="a5")
    button_a6 = types.InlineKeyboardButton(text="–ò–¥—É—â–∏–π –≤ –º–µ—Ç–µ–ª–∏", callback_data="a6")
    button_a7 = types.InlineKeyboardButton(text="–°–ø–∞–Ω–Ω–µ—Ä", callback_data="a7")
    button_a8 = types.InlineKeyboardButton(text="–ê–º–µ—Ç–∏—Å—Ç", callback_data="a8")
    button_a9 = types.InlineKeyboardButton(text="–õ–∞–∑—É—Ç—á–∏–∫", callback_data="a9")
    button_a10 = types.InlineKeyboardButton(text="–†–∞–∑–≤–µ–¥–∫–∞", callback_data="a10")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_a1, button_a3, button_a4, button_a5, button_a6, button_a7, button_a8, button_a9, button_a10, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏ –±—Ä–æ–Ω—é:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "master_armor")
def handle_callback_query_master_armor(call):
    chat_id = call.message.chat.id
    # Create an inline keyboard with weapon options
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_a11 = types.InlineKeyboardButton(text="–ó–∏–≤–∫–∞—Å", callback_data="a11")
    button_a12 = types.InlineKeyboardButton(text="–†–∏–≥–µ–ª—å", callback_data="a12")
    button_a13 = types.InlineKeyboardButton(text="–ö–ó-4", callback_data="a13")
    button_a14 = types.InlineKeyboardButton(text="–¢–∞–Ω–∫", callback_data="a14")
    button_a15 = types.InlineKeyboardButton(text="–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–æ—Å–∫–µ–ª–µ—Ç (–ì–µ–∫—Ç–æ—Ä)", callback_data="a15")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_a11, button_a12, button_a13, button_a14, button_a15, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏ –±—Ä–æ–Ω—é:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "legend_armor")
def handle_callback_query_legend_armor(call):
    chat_id = call.message.chat.id
    # Create an inline keyboard with weapon options
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_a32 = types.InlineKeyboardButton(text="–ê–ª—å–±–∞—Ç—Ä–æ—Å-–®—Ç—É—Ä–º–æ–≤–∏–∫", callback_data="a32")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_a32, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏ –±—Ä–æ–Ω—é:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "veteran_weapon")
def handle_callback_query_weapon_veteran_weapon(call):
    chat_id = call.message.chat.id
    # Create an inline keyboard with weapon options
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_a16 = types.InlineKeyboardButton(text="HK PSG1", callback_data="a16")
    button_a17 = types.InlineKeyboardButton(text="–°–í-98", callback_data="a17")
    button_a18 = types.InlineKeyboardButton(text="M1014 Breacher", callback_data="a18")
    button_a19 = types.InlineKeyboardButton(text="–û–¶-14–ú –®—Ç–æ—Ä–º", callback_data="a19")
    button_a20 = types.InlineKeyboardButton(text="–†–ü–ö-16", callback_data="a20")
    button_a21 = types.InlineKeyboardButton(text="Crye Precision SIX12", callback_data="a21")
    button_a22 = types.InlineKeyboardButton(text="–ê–ö-12", callback_data="a22")
    button_a75 = types.InlineKeyboardButton(text="Grizzly 8.5", callback_data="a75")
    button_a76 = types.InlineKeyboardButton(text="–ú–¶-255", callback_data="a76")
    button_a77 = types.InlineKeyboardButton(text="HK416", callback_data="a77")
    button_a78 = types.InlineKeyboardButton(text="AUG A2", callback_data="a78")
    button_a82 = types.InlineKeyboardButton(text="–†–ú–û-93", callback_data="a82")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_a16, button_a17, button_a18, button_a19, button_a20, button_a21, button_a22, button_a75, button_a76, button_a78, button_a77, button_a82, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏ –æ—Ä—É–∂–∏–µ:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "master_weapon")
def handle_callback_query_weapon_master_weapon(call):
    chat_id = call.message.chat.id
    # Create an inline keyboard with weapon options
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_a23 = types.InlineKeyboardButton(text="Jagdkommando", callback_data="a23")
    button_a73 = types.InlineKeyboardButton(text="M48 Tomahawk", callback_data="a73")
    button_a74 = types.InlineKeyboardButton(text="Gerber Downrange Tomahawk", callback_data="a74")
    button_a24 = types.InlineKeyboardButton(text="HK XM8S", callback_data="a24")
    button_a25 = types.InlineKeyboardButton(text="–ê–ö-308", callback_data="a25")
    button_a26 = types.InlineKeyboardButton(text="AA-12", callback_data="a26")
    button_a27 = types.InlineKeyboardButton(text="–í–°–ö-94", callback_data="a27")
    button_a28 = types.InlineKeyboardButton(text="FN FAL", callback_data="a28")
    button_a29 = types.InlineKeyboardButton(text="Scar-H", callback_data="a29")
    button_a71 = types.InlineKeyboardButton(text="HK417", callback_data="a71")
    button_a72 = types.InlineKeyboardButton(text="IWI Tavor X95", callback_data="a72")
    button_a30 = types.InlineKeyboardButton(text="–ü–¢–†–î-–ú", callback_data="a30")
    button_a38 = types.InlineKeyboardButton(text="LR-300", callback_data="a37")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")

    markup.add(button_a23, button_a24, button_a25, button_a26, button_a27, button_a28, button_a29, button_a30,
               button_a38, button_a71, button_a72, button_a73, button_a74, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏ –æ—Ä—É–∂–∏–µ:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "legend_weapon")
def handle_callback_query_weapon_legend_weapon(call):
    chat_id = call.message.chat.id
    # Create an inline keyboard with weapon options
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_gays = types.InlineKeyboardButton(text="–ì–∞—É—Å—Å-–ü—É—à–∫–∞", callback_data="a31")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_gays, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏ –æ—Ä—É–∂–∏–µ:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "ddt")
def handle_callback_query_ddt(call):
    chat_id = call.message.chat.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–Ω–≥–∞–º–∏ –±—Ä–æ–Ω–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_elb = types.InlineKeyboardButton(text="–î–£–î –≠–ª—å–±—Ä—É—Å", callback_data="a33")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_elb, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text="–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "cont")
def handle_callback_query_cont(call):
    chat_id = call.message.chat.id
    # Create an inline keyboard with weapon options
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_6y = types.InlineKeyboardButton(text="–ë–µ—Ä–ª–æ–≥–∞ 6—É", callback_data="a34")
    button_4y = types.InlineKeyboardButton(text="–ë–µ—Ä–ª–æ–≥–∞ 4—É", callback_data="a35")
    button_ksm = types.InlineKeyboardButton(text="–ö–°–ú", callback_data="a36")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_4y, button_6y, button_ksm, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:",
                          reply_markup=markup)


@bot.callback_query_handler(
    func=lambda call: call.data in ["a1", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a10", "a11", "a12", "a13", "a14",
                                    "a15", "a16", "a17", "a18", "a19", "a20", "a21", "a22", "a23", "a24", "a25", "a26",
                                    "a27", "a28", "a29", "a30", "a31", "a32", "a33", "a34", "a35", "a36", "a37", "a66", "a67", "a68", "a69", "a70", "a71", "a72", "a73", "a74", "a75", "a76", "a77", "a78", "a79", "a80", "a82"])
def handle_callback_query_item(call):
    chat_id = call.message.chat.id
    item_id = {
        "a1": ("1rkn1"),
        "a3": ("y359o"),
        "a4": ("4qldn"),
        "a5": ("5lr4q"),
        "a6": ("qjomk"),
        "a7": ("y35l3"),
        "a8": ("ok096"),
        "a9": ("zzjgn"),
        "a10": ("knqkv"),
        "a11": ("g43rp"),
        "a12": ("kn3yv"),
        "a13": ("qj1lk"),
        "a14": ("y3q1o"),
        "a15": ("5l1q0"),
        "a16": ("okm20"),
        "a17": ("knm0v"),
        "a18": ("m0mz2"),
        "a19": ("4qnwn"),
        "a20": ("2onz6"),
        "a21": ("0r211"),
        "a22": ("g4mdp"),
        "a23": ("knvmj"),
        "a24": ("n4md3"),
        "a25": ("dmjdn"),
        "a26": ("qj2zk"),
        "a27": ("m0mo7"),
        "a28": ("5lnw0"),
        "a29": ("wj75o"),
        "a30": ("4qnyn"),
        "a31": ("knmdv"),
        "a32": ("wj4no"),
        "a33": ("gdj6"),
        "a34": ("49dj"),
        "a35": ("l3n2"),
        "a36": ("j3ml"),
        "a37": ("5ln40"),
        "a66": ("4qp1o"),
        "a67": ("ly1lo"),
        "a68": ("rw4ry"),
        "a69": ("96pwy"),
        "a70": ("3g7wg"),
        "a71": ("p63d2"),
        "a72": ("2ony6"),
        "a73": ("vj427"),
        "a74": ("y3j20"),
        "a75": ("6w64y"),
        "a76": ("rw2ky"),
        "a77": ("dmjwn"),
        "a78": ("969jz"),
        "a79": ("5lv9o"),
        "a80": ("j56d6"),
        "a82": ("RMB-93")




    }[call.data]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if chat_id in user_threads:
        bot.send_message(chat_id,
                         "–í—ã —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –ª–æ—Ç‚ùó\n–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–π.\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if active_users >= MAX_USERS:
        bot.send_message(chat_id, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ.")
        return

    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –≤—ã–∫—É–ø–∞ (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 100000)")

    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—ã –≤—ã–∫—É–ø–∞
    def handle_buyout_price(message, chat_id, item_id):
        global active_users
        try:
            buyout_price = int(message.text)

            with lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if chat_id in user_threads:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫
                    user_threads[chat_id].stop_event.set()
                    user_threads[chat_id].join()
                    del user_threads[chat_id]
                    active_users -= 1
                    print(
                        f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}")

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
                stop_event = threading.Event()
                thread = threading.Thread(target=monitor_lots,
                                          args=(chat_id, item_id, buyout_price, stop_event))
                thread.stop_event = stop_event  # –î–æ–±–∞–≤–∏–ª–∏ stop_event –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç
                user_threads[chat_id] = thread
                thread.start()
                active_users += 1
                print(f"–ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}")
                bot.send_message(chat_id,
                                 "‚úÖÔ∏è–û–ø–æ–≤–µ—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã‚úÖÔ∏è\n–Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª–æ—Ç—ã —Å —Ü–µ–Ω–æ–π –≤—ã–∫—É–ø–∞ –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–π –∑–∞–¥–∞–Ω–Ω–æ–π.")

        except ValueError:
            bot.send_message(chat_id,
                             "‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ‚ùó\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–≤–µ–¥—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 100000.")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–º–µ—Ç–∞

    bot.register_next_step_handler(call.message, handle_buyout_price, chat_id, item_id)


@bot.message_handler(commands=['stop'])
def handle_stop_command(message):
    chat_id = message.chat.id
    with lock:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º lock –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id in user_threads:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
            bot.send_message(chat_id, "–ü–æ–Ω—è–ªüëå, c–µ–π—á–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–ª—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Å—å –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
            user_threads[chat_id].stop_event.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Event
            # –î–æ–±–∞–≤–ª–µ–Ω join() —á—Ç–æ–±—ã –∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            user_threads[chat_id].join()
            # –£–¥–∞–ª–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ user_threads *–ø–æ—Å–ª–µ* –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            del user_threads[chat_id]

            global active_users
            active_users -= 1  # –£–º–µ–Ω—å—à–∞–µ–º active_users –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞
            print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}")
            bot.send_message(chat_id, "‚õîÔ∏è–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã‚õîÔ∏è\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä—É–≥–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–æ—Ç—ã –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ!")
        else:
            # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(chat_id, "‚ö†Ô∏è–û–ø–æ–≤–µ—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã.‚ö†Ô∏è")


def monitor_lots(chat_id, item_id, buyout_price, stop_event):
    lp = []
    previous_lots = []  # –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    sent_lot_removal_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–æ–≤

    # –¶–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    while not stop_event.is_set():
        lots = client.auction(item_id).lots(limit=10, sort=Sort.BUYOUT_PRICE, order=Order.ASC, additional=True)
        print(f"—ç—Ç–æ –ø—Ä–µ–¥–º–µ—Ç—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ª–æ—Ç—ã
        for previous_lot in previous_lots:
            if previous_lot not in lots:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ª–æ—Ç–∞
                if (chat_id, previous_lot.item_id, previous_lot.buyout_price) not in sent_lot_removal_messages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ü–µ–Ω–∞ –≤—ã–∫—É–ø–∞ –ª–æ—Ç–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ò –ù–ï —Ä–∞–≤–Ω–∞ 0
                    if previous_lot.buyout_price <= buyout_price and previous_lot.buyout_price > 0:
                        bot.send_message(chat_id,
                                         f"‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó\n–õ–æ—Ç,–∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å —Ü–µ–Ω–æ–π –≤—ã–∫—É–ø–∞üíµ: {previous_lot.buyout_price}\n–í—ã–∫—É–ø–∏–ª–∏ –∏–ª–∏ —Å–Ω—è–ª–∏ —Å –ø—Ä–æ–¥–∞–∂–∏‚ùó")
                        sent_lot_removal_messages[(chat_id, previous_lot.item_id,
                                                   previous_lot.buyout_price)] = True  # –û—Ç–º–µ—Ç–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        previous_lots = lots

        for lot in lots:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–Ω–∞ –≤—ã–∫—É–ø–∞ –∏ –æ–Ω–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π, –∏ –ù–ï —Ä–∞–≤–Ω–∞ 0
            if lot.buyout_price > 0 and lot.buyout_price <= buyout_price:
                if lp.count(lot) == 0:
                    start_time_str = lot.start_time.strftime('%Y-%m-%d %H:%M:%S')
                    end_time_str = lot.end_time.strftime('%Y-%m-%d %H:%M:%S')
                    formatted_buyout_price = "{:,.0f}".format(lot.buyout_price).replace(",", ".")
                    seller_name = lot.additional.get('buyer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

                    message_text = f"‚ùó–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ª–æ—Ç‚ùó\n–¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞: {formatted_buyout_price}üíµ \n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞: {start_time_str}üö©\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ—Ç–∞: {end_time_str}‚è≥\n–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n\n"

                    bot.send_message(chat_id, message_text)

                    lp.append(lot)
        # Sleep for 15 seconds before making a new request
        sleep(20)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_event.clear()

@bot.callback_query_handler(func=lambda call: call.data == "art")
def handle_callback_query_art(call):
    chat_id = call.message.chat.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–Ω–≥–∞–º–∏ –±—Ä–æ–Ω–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_elc = types.InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ‚ö°Ô∏è", callback_data="elc")
    button_term = types.InlineKeyboardButton(text="–¢–µ—Ä–º–∏—á–µ—Å–∫–∏–µüî•", callback_data="term")
    button_grav = types.InlineKeyboardButton(text="–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µüåå", callback_data="grav")
    button_bio = types.InlineKeyboardButton(text="–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ‚ò£Ô∏è", callback_data="bio")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_elc, button_term, button_grav, button_bio, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text="–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "bio")
def handle_callback_query_bio(call):
    chat_id = call.message.chat.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–Ω–≥–∞–º–∏ –±—Ä–æ–Ω–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_zm = types.InlineKeyboardButton(text="–ó–º–µ–∏–Ω—ã–π –≥–ª–∞–∑", callback_data="a61")
    button_se = types.InlineKeyboardButton(text="–°—Ç–∞–ª—å–Ω–æ–π –ï–∂–∏–∫", callback_data="a62")
    button_er = types.InlineKeyboardButton(text="–ï—Ä—à–∏–∫", callback_data="a63")
    button_mn = types.InlineKeyboardButton(text="–ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫", callback_data="a64")
    button_err = types.InlineKeyboardButton(text="–ï–∂–∏–∫", callback_data="a65")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_zm, button_se, button_er, button_mn, button_err, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text="–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ  –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "grav")
def handle_callback_query_grav(call):
    chat_id = call.message.chat.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–Ω–≥–∞–º–∏ –±—Ä–æ–Ω–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_proto = types.InlineKeyboardButton(text="–ü—Ä–æ—Ç–æ—Ü–∏–±—É–ª—è", callback_data="a53")
    button_roza = types.InlineKeyboardButton(text="–ü—Ä–æ–∫–ª—è—Ç–∞—è —Ä–æ–∑–∞", callback_data="a54")
    button_nt = types.InlineKeyboardButton(text="–Ø–Ω—Ç–∞—Ä–Ω–∏–∫", callback_data="a55")
    button_kr = types.InlineKeyboardButton(text="–ö—Ä–µ–≤–µ—Ç–∫–∞", callback_data="a56")
    button_br = types.InlineKeyboardButton(text="–ë—Ä–∞—Å–ª–µ—Ç", callback_data="a57")
    button_temn = types.InlineKeyboardButton(text="–¢–µ–º–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª", callback_data="a58")
    button_ost = types.InlineKeyboardButton(text="–û—Å—Ç–æ–≤", callback_data="a59")
    button_prim = types.InlineKeyboardButton(text="–ó–æ–ª–æ—Ç–∏—Å—Ç–∞—è –ü—Ä–∏–º–∞", callback_data="a60")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_proto, button_roza, button_nt, button_kr, button_br, button_temn, button_ost, button_prim, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text="–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ  –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "term")
def handle_callback_query_term(call):
    chat_id = call.message.chat.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–Ω–≥–∞–º–∏ –±—Ä–æ–Ω–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_pt = types.InlineKeyboardButton(text="–ñ–∞—Ä-–ø—Ç–∏—Ü–∞", callback_data="a46")
    button_r = types.InlineKeyboardButton(text="–†–∞–¥–∏–∞—Ç–æ—Ä", callback_data="a47")
    button_s = types.InlineKeyboardButton(text="–°–æ–ª–Ω—Ü–µ", callback_data="a48")
    button_v = types.InlineKeyboardButton(text="–í–µ—Ç–∫–∞ –ö–∞–ª–∏–Ω—ã", callback_data="a49")
    button_k = types.InlineKeyboardButton(text="–ö–∞–±–ª—É–∫", callback_data="a50")
    button_f = types.InlineKeyboardButton(text="–§–∞—Ä–µ–Ω–≥–µ–π—Ç", callback_data="a51")
    button_vi = types.InlineKeyboardButton(text="–í–∏—Ö—Ä—å", callback_data="a52")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_pt, button_r, button_s, button_v, button_k, button_f, button_vi, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text="–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ  –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "elc")
def handle_callback_query_elc(call):
    chat_id = call.message.chat.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–Ω–≥–∞–º–∏ –±—Ä–æ–Ω–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_spir = types.InlineKeyboardButton(text="–°–ø–∏—Ä–∞–ª—å", callback_data="a39")
    button_atm = types.InlineKeyboardButton(text="–ê—Ç–æ–º", callback_data="a38")
    button_osk = types.InlineKeyboardButton(text="–û—Å–∫–æ–ª–æ–∫", callback_data="a41")
    button_priz = types.InlineKeyboardButton(text="–ü—Ä–∏–∑–º–∞", callback_data="a42")
    button_zer = types.InlineKeyboardButton(text="–ó–µ—Ä–∫–∞–ª–æ", callback_data="a44")
    button_gel = types.InlineKeyboardButton(text="–ì–µ–ª–∏–π", callback_data="a43")
    button_tran = types.InlineKeyboardButton(text="–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä", callback_data="a45")
    button_back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨áÔ∏è", callback_data="back")
    markup.add(button_spir, button_atm, button_osk, button_priz, button_zer, button_gel, button_tran, button_back)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:",
                          reply_markup=markup)




@bot.callback_query_handler(
    func=lambda call: call.data in ["a38", "a39", "a41", "a42", "a43", "a44", "a45", "a46", "a47", "a48", "a49", "a50", "a51", "a52", "a53", "a54", "a55", "a56", "a57", "a58", "a59", "60", "a61", "a62", "a63", "a64", "a65"])
def handle_callback_query_item_art(call):
    chat_id = call.message.chat.id
    item_id = {
        "a38": LocalItem("Atom"),
        "a39": LocalItem("Spiral"),
        "a41": LocalItem("Shard"),
        "a42": LocalItem("Prism"),
        "a43": LocalItem("Helium"),
        "a44": LocalItem("Mirror"),
        "a45": LocalItem("Transformer"),
        "a46": LocalItem("–ü–ª–∞–º—è"),
        "a47": LocalItem("–†–∞–¥–∏–∞—Ç–æ—Ä"),
        "a48": LocalItem("–°–æ–ª–Ω—Ü–µ"),
        "a49": LocalItem("–ú–∞–º–∏–Ω—ã –±—É—Å—ã"),
        "a50": LocalItem("–ö–∞–±–ª—É–∫"),
        "a51": LocalItem("–§–∞—Ä–µ–Ω–≥–µ–π—Ç"),
        "a52": LocalItem("–í–∏—Ö—Ä—å"),
        "a53": LocalItem("–ü—Ä–æ—Ç–æ–º–µ–¥—É–∑–∞"),
        "a54": LocalItem("–¢–µ–º–Ω–∞—è –º–µ–¥—É–∑–∞"),
        "a55": LocalItem("–Ø–Ω—Ç–∞—Ä–Ω–∏–∫"),
        "a56": LocalItem("–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞"),
        "a57": LocalItem("–ë—Ä–∞—Å–ª–µ—Ç"),
        "a58": LocalItem("–ß–µ—Ä–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª"),
        "a59": LocalItem("–û—Å—Ç–æ–≤"),
        "a60": LocalItem("–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π –≥—Ä–∞–≤–∏"),
        "a61": LocalItem("–°–≤–µ—Ç–ª—è–∫"),
        "a62": LocalItem("–°—Ç–∞–ª—å–Ω–æ–π –∫–æ–ª–æ–±–æ–∫"),
        "a63": LocalItem("–ú–æ—Ä—Å–∫–æ–π –µ–∂"),
        "a64": LocalItem("–ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫"),
        "a65": LocalItem("–ö–æ–ª–æ–±–æ–∫")

    }[call.data]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if chat_id in user_threads:
        bot.send_message(chat_id,
                         "–í—ã —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –ª–æ—Ç‚ùó\n–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–π.\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if active_users >= MAX_USERS:
        bot.send_message(chat_id, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–π,–≥–¥–µ:\n\n0-–û–±—ã—á–Ω—ã–π ‚ö™\n\n1-–ù–µ–æ–±—ã—á–Ω—ã–π üü¢\n\n2-–û—Å–æ–±—ã–π üîµ\n\n3-–†–µ–¥–∫–∏–π üü£\n\n4-–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–πüî¥\n\n5-–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π üü°")

    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    def handle_qlt(message, chat_id, item_id):
        try:
            qlt = int(message.text)
            if qlt < 0 or qlt > 5:
                bot.send_message(chat_id, "‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –≤—ã–∫—É–ø–∞ (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 100000)")

            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—ã –≤—ã–∫—É–ø–∞
            def handle_buyout_price_art(message, chat_id, item_id, qlt):
                global active_users
                try:
                    buyout_price = int(message.text)

                    with lock:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º lock —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if chat_id in user_threads:
                            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫
                            user_threads[chat_id].stop_event.set()
                            user_threads[chat_id].join()
                            del user_threads[chat_id]
                            active_users -= 1  # –£–º–µ–Ω—å—à–∞–µ–º active_users
                            print(
                                f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}")

                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
                        stop_event = threading.Event()
                        thread = threading.Thread(target=monitor_lots_art,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ monitor_lots_art
                                                  args=(chat_id, item_id, buyout_price, qlt, stop_event))
                        thread.stop_event = stop_event  # –î–æ–±–∞–≤–∏–ª–∏ stop_event –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç
                        user_threads[chat_id] = thread
                        thread.start()
                        active_users += 1
                        print(f"–ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}")
                        bot.send_message(chat_id,
                                         "‚úÖÔ∏è–û–ø–æ–≤–µ—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã‚úÖÔ∏è\n–Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª–æ—Ç—ã —Å —Ü–µ–Ω–æ–π –≤—ã–∫—É–ø–∞ –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–π –∑–∞–¥–∞–Ω–Ω–æ–π.")

                except ValueError:
                    bot.send_message(chat_id,
                                     "‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ‚ùó\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–≤–µ–¥—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 100000.")

                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–º–µ—Ç–∞

            bot.register_next_step_handler(call.message, handle_buyout_price_art, chat_id, item_id, qlt)

        except ValueError:
            bot.send_message(chat_id,
                                "‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ‚ùó\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–≤–µ–¥—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1.")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    bot.register_next_step_handler(call.message, handle_qlt, chat_id, item_id)




# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è monitor_lots
def monitor_lots_art(chat_id, item_id, buyout_price, qlt, stop_event):
    lp = []
    previous_lots = []  # –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    sent_lot_removal_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–æ–≤
    message_count = 0  # –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    # –¶–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    while not stop_event.is_set():
        lots = client.auction(item_id).lots(limit=200, sort=Sort.BUYOUT_PRICE, order=Order.ASC, additional=True)
        print("–≠—Ç–æ –∞—Ä—Ç—ã")


        # –§–∏–ª—å—Ç—Ä—É–µ–º previous_lots –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        filtered_previous_lots = [lot for lot in previous_lots if 'qlt' in lot.additional and int(lot.additional['qlt']) == qlt]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ª–æ—Ç—ã
        for previous_lot in filtered_previous_lots:
            if previous_lot not in lots:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ª–æ—Ç–∞
                if (chat_id, previous_lot.item_id, previous_lot.buyout_price) not in sent_lot_removal_messages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ü–µ–Ω–∞ –≤—ã–∫—É–ø–∞ –ª–æ—Ç–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ò –ù–ï —Ä–∞–≤–Ω–∞ 0
                    if previous_lot.buyout_price <= buyout_price and previous_lot.buyout_price > 0:
                        bot.send_message(chat_id,
                                         f"‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó\n–õ–æ—Ç,–∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å —Ü–µ–Ω–æ–π –≤—ã–∫—É–ø–∞üíµ: {previous_lot.buyout_price}\n–í—ã–∫—É–ø–∏–ª–∏ –∏–ª–∏ —Å–Ω—è–ª–∏ —Å –ø—Ä–æ–¥–∞–∂–∏‚ùó")
                        sent_lot_removal_messages[(chat_id, previous_lot.item_id,
                                                   previous_lot.buyout_price)] = True  # –û—Ç–º–µ—Ç–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        previous_lots = lots

        for lot in lots:
            if 'qlt' in lot.additional:
                lot_qlt = int(lot.additional['qlt'])
            else:
                lot_qlt = 0
            if lot_qlt == qlt:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–Ω–∞ –≤—ã–∫—É–ø–∞ –∏ –æ–Ω–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π, –∏ –ù–ï —Ä–∞–≤–Ω–∞ 0
                if lot.buyout_price > 0 and lot.buyout_price <= buyout_price:
                    if lp.count(lot) == 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
                        if message_count < 10:
                            start_time_str = lot.start_time.strftime('%Y-%m-%d %H:%M:%S')
                            end_time_str = lot.end_time.strftime('%Y-%m-%d %H:%M:%S')
                            formatted_buyout_price = "{:,.0f}".format(lot.buyout_price).replace(",", ".")
                            art_qlt = lot.additional.get('qlt', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')


                            message_text = f"‚ùó–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ª–æ—Ç —Å –∫–∞—á–µ—Å—Ç–≤–æ–º {art_qlt}‚ùó\n–¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞: {formatted_buyout_price}üíµ \n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞: {start_time_str}üö©\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ—Ç–∞: {end_time_str}‚è≥\n\n"

                            bot.send_message(chat_id, message_text)

                            lp.append(lot)
                            message_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                        else:
                            print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                            # –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä,
                            # bot.send_message(chat_id, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Å–æ–æ–±—â–µ–Ω–∏–π. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
        # Sleep for 15 seconds before making a new request
        sleep(20)
        message_count = 0
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_event.clear()